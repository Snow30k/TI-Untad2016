unit mainForm;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.StdCtrls, Vcl.Buttons, Vcl.Grids,
  Vcl.ComCtrls, Vcl.ExtCtrls;

type
  TMatrix = array of array of Integer;
  TPath = array of integer;

type
  Thread1 = class(TThread)
    public
      n: Integer;
      max: Integer;
      mutate: Double;
      sumPop: Integer;
    protected
      procedure Execute; Override;
    public
      procedure drawBP;
      procedure redrawBP;
  end;
  TForm1 = class(TForm)
    Panel1: TPanel;
    PC1: TPageControl;
    sS: TTabSheet;
    Label2: TLabel;
    Memo1: TMemo;
    btnProses: TBitBtn;
    btnBersihkan: TBitBtn;
    btnGenerate: TBitBtn;
    edPop: TEdit;
    Panel2: TPanel;
    Canvas: TImage;
    Label3: TLabel;
    Edit1: TEdit;
    Label1: TLabel;
    Label4: TLabel;
    Edit2: TEdit;
    Panel3: TPanel;
    Matrix: TStringGrid;
    procedure FormCreate(Sender: TObject);
    procedure CanvasDblClick(Sender: TObject);
    procedure CanvasMouseMove(Sender: TObject; Shift: TShiftState; X,
      Y: Integer);
    procedure makeLine(Sender: TObject);
    procedure btnGenerateClick(Sender: TObject);
    procedure CanvasClick(Sender: TObject);
    procedure cariTitikAwal(Sender: TObject);
    procedure btnBersihkanClick(Sender: TObject);
    procedure btnProsesClick(Sender: TObject);
  private
    { Private declarations }
  public
    { Public declarations }
    procedure drawLine(startPt, endPt:TPoint; mode:TPenMode);
//    procedure ABC1(matrix: TMatrix; awal, sumNode, max: Integer; var bestEver: TPath);
    procedure DrawBestSolution(Path: TPath; cl: TColor);
  end;

var
  Form1: TForm1;
  recDis: Integer;
  bestPath: TPath;
  mtx: TMatrix;

implementation

{$R *.dfm}
uses
  AlgoritmaABC1, Abc2;

var
  count, n: Integer; // variable untuk mengontrol banyaknya node yang dibuat
  bestSolution: TPath;// Variable yang nantinya sebagai output
  curLoc, loc, origin, moveTo: TPoint;
  draw: BOOL;
  infinity: Word = 9999;
  curr: Integer;
  curNode: TPanel;
  workerThread: Thread1;

procedure TForm1.drawLine(startPt, endPt:TPoint; mode:TPenMode);
begin
  if draw then
  begin
    Canvas.Canvas.Pen.Mode := mode;
    Canvas.Canvas.Pen.Width := 2;
    Canvas.Canvas.MoveTo(startPt.X, startPt.Y);
    Canvas.Canvas.LineTo(endPt.X, endPt.Y);
  end;
end;
  
// Procedure Untuk Membuat Radius Pada Component
procedure RoundCornerOf(Control: TWinControl) ;
var
   R: TRect;
   Rgn: HRGN;
begin
   with Control do
   begin
     R := ClientRect;
     rgn := CreateRoundRectRgn(R.Left, R.Top, R.Right, R.Bottom, 40, 40) ;
     Perform(EM_GETRECT, 0, lParam(@r)) ;
     InflateRect(r, - 4, - 4) ;
     Perform(EM_SETRECTNP, 0, lParam(@r)) ;
     SetWindowRgn(Handle, rgn, True) ;
     Invalidate;
   end;
end;

//Procedure untuk menghubungkan semua edge secara otomatis
procedure TForm1.btnBersihkanClick(Sender: TObject);
begin
  FormCreate(Sender);
  Memo1.Lines.Clear;
  DrawBestSolution(bestSolution, clBlack);
end;

procedure TForm1.btnGenerateClick(Sender: TObject);
var
  i, j, rand: byte;
  node1, node2: TPanel;
begin
  Canvas.Canvas.Pen.Color := clBlack;
  draw := True;
  for i := 0 to count-1 do
  begin
    node1 := TPanel(FindComponent('Node'+IntToStr(i)));
    if node1 <> nil then
    begin
      origin := Point(node1.Left+(node1.Width div 2), node1.Top+(node1.Height div 2));
      for j := i+1 to count-1 do
      begin
        node2 := TPanel(FindComponent('Node'+IntToStr(j)));
        if node2 <> nil then
        begin
          moveTo := Point(node2.Left+(node2.Width div 2), node2.Top+(node2.Height div 2));
          drawLine(origin, moveTo, pmNotXor);
          loc := Point((origin.X + moveTo.X) div 2, (origin.Y + moveTo.Y) div 2);
          rand := round(sqrt(sqr(abs(moveTo.Y-origin.Y)/9) + (sqr(moveTo.X-origin.X)/9)));//membangkitkan nilai secara acak untuk setiap vertex/edge yang dibuat
          Canvas.Canvas.TextOut(loc.X, loc.Y, IntToStr(rand));
          //memasukan nilai acak yang telah di bangkitkan ke dalam stringGrid
          Matrix.Cells[Ord(node1.Caption[1])-64, Ord(node2.Caption[1])-64] := IntToStr(rand);
          Matrix.Cells[Ord(node2.Caption[1])-64, Ord(node1.Caption[1])-64] := IntToStr(rand);
        end;
      end;
    end;
  end;
  draw := False;
end;

procedure TForm1.btnProsesClick(Sender: TObject);
var
  matrixAdj: TMatrix;
  awal, i, j, cont: Integer;
  ulang: BOOL;
begin
  Memo1.Lines.Clear;
  //Memindahkan Nilai dari StringGrid Kedalam variable
  workerThread := Thread1.Create(False);
  SetLength(mtx, count, count);
  for i := 1 to Matrix.RowCount-1 do
    for j := 1 to Matrix.ColCount-1 do
      mtx[i-1][j-1] := StrToInt(Matrix.Cells[i, j]);
  workerThread.n := count;
  workerThread.max := StrToInt(Edit1.Text);
  workerThread.mutate := StrToFloat(Edit2.Text);
  workerThread.sumPop := StrToInt(edPop.Text);
end;

procedure TForm1.CanvasClick(Sender: TObject);
begin
  //PRocedure ini berguna untuk Menghapus Line jika
  //mengklik pada area canvas
  if draw then
  begin
    drawLine(origin, moveTo, pmNotXor);
    draw := False;
  end;
end;

procedure TForm1.CanvasDblClick(Sender: TObject);
var
  node: TPanel;
  i: Byte;
begin
  node := TPanel.Create(Self);
  node.Parent := Panel2;
  node.BevelOuter := bvNone;
  node.ParentBackground := False;
  node.Color := clBlack;
  node.Font.Color := clWhite;
  node.Font.Size := 8;
  node.Width := 15;
  node.Height := 15;
  node.Left := loc.X;
  node.Top := loc.Y;
  node.Name := 'Node'+IntToStr(count);
  node.Caption := Chr(65+count);
  RoundCornerOf(node);
  node.BringToFront;
  //node.OnClick := makeLine;
  node.OnDblClick := cariTitikAwal;
  //ComboBox1.Items.Append(Chr(65+count));
  count := count + 1;

  if count > 1 then
  begin
    Matrix.RowCount := Matrix.RowCount + 1;
    Matrix.ColCount := Matrix.ColCount + 1;
    Matrix.Cells[0, count] := Chr(65+count-1);
    Matrix.Cells[count, 0] := Chr(65+count-1);
    Matrix.Cells[count, count] := '0';

    for I := 1 to count-1 do
    begin
      Matrix.Cells[i, count] := '9999';
      Matrix.Cells[count, i] := '9999';
    end;
  end;
end;

procedure TForm1.CanvasMouseMove(Sender: TObject; Shift: TShiftState; X,
  Y: Integer);
begin
  loc := Point(X, Y);
  //Membuat preview Line yang blm di hubungkan
  //garis baru akan dibuat setiap mouse di gerakan dan garis sebelumnya
  //akan dihapus
  if draw then
  begin
    Canvas.Canvas.Pen.Color := clRed;
    drawLine(origin, moveTo, pmNotXor);//menghapus garis sebelumnya
    moveTo := Point(X, Y);
    drawLine(origin, moveTo, pmNotXor);//menampilkan garis saat ini
  end;
end;

procedure TForm1.FormCreate(Sender: TObject);
var
  Bitmap: TBitmap;
  node: TPanel;
  i: Byte;
begin
  count := 0;
  //Membersihkan Canvas/Image 
  Bitmap := nil;
  try
    Bitmap := TBitmap.Create;
    Bitmap.Width := Canvas.Width;
    Bitmap.Height := Canvas.Height;
    Canvas.Picture.Graphic := Bitmap;
  finally
    Bitmap.Free;
  end;
  for I := 0 to count-1 do
    if TPanel(FindComponent('Node'+IntToStr(I))) <> Nil then
    begin
      node := TPanel(FindComponent('Node'+IntToStr(I)));
      FreeAndNil(node); //Menghapus Node
    end;

  Matrix.RowCount := 2;
  Matrix.ColCount := 2;
  Matrix.Cells[1, 1] := '0';
  Matrix.Cells[0, 1] := 'A';
  Matrix.Cells[1, 0] := 'A';
end;

procedure TForm1.makeLine(Sender: TObject);
var
  rand: Byte;
begin
  if draw then
  begin
    drawLine(Origin, moveTo, pmNotXor); //Menghapus Edge Yang Belum FIX
    loc.X := TPanel(Sender).Left+(TPanel(Sender).Width div 2);
    loc.Y := TPanel(Sender).top+(TPanel(Sender).Height div 2);
    Canvas.Canvas.Pen.Color := clBlack;
    MoveTo := Point(loc.X, loc.Y);
    drawLine(Origin, moveTo, pmCopy); //Membuat Edge Yang Fix
    rand := 5 + Random(25);//Generate Random value untuk setiap vertex/Edge dari 5-30
    Matrix.Cells[curr+1, (Ord(TPanel(Sender).Caption[1]))-65+1] := IntToStr(rand);
    Matrix.Cells[(Ord(TPanel(Sender).Caption[1]))-65+1, curr+1] := IntToStr(rand);
    loc.X := (loc.X-4 + curLoc.X-4) div 2;
    loc.Y := (loc.Y-4  + curLoc.Y-4) div 2;
    Canvas.Canvas.TextOut(loc.X, loc.Y, IntToStr(rand)); //Menampilkan Nilai Pada Edge
    draw := False;
  end
  else
  begin
    curr := (Ord(TPanel(Sender).Caption[1])-65);//Meyimpan Node/Panel Saat ini
    draw := true;
    //Menghitung Koordinat Node Saat ini
    curLoc := Point(TPanel(Sender).Left+(TPanel(Sender).Width div 2), TPanel(Sender).top+(TPanel(Sender).Height div 2));
    origin := Point(curLoc.X, curLoc.Y); // Menentukan Titik Awal Line
    moveTo := origin;//Untuk menghilangkan BUG
  end;
end;

procedure TForm1.cariTitikAwal(Sender: TObject);
begin
  //Fungsi ini berguna untuk menentukan titik awal dengan
  //cara mengklik dua kali pada node
  TPanel(Sender).Color := clRed;
  if curNode <> Nil then curNode.Color := clBlack;
  curNode := TPanel(Sender);
  //ComboBox1.Text := curNode.Caption;
end;

procedure TForm1.DrawBestSolution(Path: TPath; cl: TColor);
var
  node1, node2: TPanel;
  i: Integer;
begin
  draw := True;
  for i := 0 to Length(Path)-2 do
  begin
    node1 := TPanel(FindComponent('Node'+IntToStr(Path[i])));
    node2 := TPanel(FindComponent('Node'+IntToStr(Path[i+1])));
    origin.X := node1.Left + (node1.Width div 2);
    origin.Y := node1.Top + (node1.Height div 2);

    moveTo.X := node2.Left + (node2.Width div 2);
    moveTo.Y := node2.Top + (node2.Height div 2);
    drawLine(origin, moveTo, pmNotXor);
    Canvas.Canvas.Pen.Color := cl;
    drawLine(origin, moveTo, pmCopy);
  end;
  draw := False;
end;

{ Thread1 }

procedure Thread1.drawBP;
begin
  Form1.DrawBestSolution(bestPath, clRed);
end;

procedure Thread1.Execute;

procedure copyOrder(var a, b:TPath);
var
  i:Integer;
begin
  for i := 0 to Length(a)-1 do
    b[i] := a[i];
end;

procedure swapIndx(var arr: Array of Integer; a, b: Integer);
var
  temp: Integer;
begin
  temp := arr[a];
  arr[a] := arr[b];
  arr[b] := temp;
end;

function calcDis(d: TPath): Integer;
var
  i: Integer;
begin
  try
    Result := 0;
    for I := 0 to Length(d)-2 do
    begin
      Result := Result + mtx[d[i]][d[i+1]];
    end;
  except
    MessageDlg('Terjadi Kesalahan Dalam Menghitung Jarak', mtError, [mbOK], 0);
    Result := 9999;
  end;
end;

procedure shuffle(var arr: array of Integer; sum: Integer);
var
  indexA, indexB: Integer;
  i, j: Integer;
begin
  for i := 0 to sum do
  begin
    indexA := Random((Length(arr)-1));
    indexB := Random((Length(arr)-1));
    if (indexA < Length(arr))and (indexB < Length(arr)) then
      swapIndx(arr, indexA, indexB);
  end;
end;

function pilihAcak(prob: array of real): Integer;
var
  r: Extended;
begin
  Result := 0;
  r:= Random;
  if r > 1 then
    Exit;
  while r > 0 do
  begin
    r := r - prob[Result];
    Result := Result + 1;
  end;  
  Result := Result - 1;
end;

procedure crossOver(a, b: TPath; var c: TPath);
var
  endInd, i, j, k: Integer;
  match: BOOL;
begin
  for i := 0 to n do
    c[i] := -1;
  endInd := 1+(Random(n)-2);
  for i := 0 to endInd-1 do
    c[i] := a[i];
  for i := 0 to n-1 do
  begin
    match := False;
    for j := 0 to endInd-1 do
      if c[j] = b[i] then
      begin
        match := True;
        Break;
      end;
    if not match then
    begin
      c[endInd] := b[i];
      endInd := endInd + 1;
    end;
  end;
end;

procedure mutasi(var a: TPath);
var
  indA, indB: Integer;
  r: Double;
  i: Integer;
begin
  for i := 0 to n-1 do
  begin
    r := Random;
    if r < mutate then
    begin
      indA := Random(n);
      indB := (indA+1) mod n;
      swapIndx(a, indA, indB);
    end;
  end;
end;

var
  i, j, d, a, indA, indB: Integer;
  sum: real;
  pop, newPop: array of TPath;
  path: TPath;
  fit: array of real;
  toStr: string;
  
begin
  inherited;
  recDis := 9999;

  SetLength(pop, sumPop);
  SetLength(newPop, sumPop);
  SetLength(fit, sumPop);
  SetLength(pop[0], n+1);
  SetLength(newPop[0], n+1);
  SetLength(path, n+1);
  for i := 0 to n-1 do
    pop[0][i] := i;
  pop[0][n] := pop[0][0];
    
  for i := 1 to sumPop-1 do
  begin
    SetLength(pop[i], n+1);
    SetLength(newPop[i], n+1);
    pop[i] := Copy(pop[0], 0, n+1);
    shuffle(pop[i], 50);
    pop[i][n] := pop[i][0];
  end;   

  for i := 0 to max-1 do
  begin
    // Menghitung Fitness Dan Mencari Solusi Terbaik
    for j := 0 to sumPop-1 do
    begin
      d := calcDis(pop[j]);
      fit[j] := 1/(d+1);
      if d < recDis then
      begin
        recDis := d;
        Synchronize(redrawBP);
        bestPath := Copy(pop[j], 0, n+1);
        Synchronize(drawBP);
        toStr := '';
        for a := 0 to n do
          toStr := toStr + IntToStr(pop[j][a]);
        Form1.Memo1.Lines.Clear;
        Form1.Memo1.Lines.Append('Generasi '+IntToStr(i));
        Form1.Memo1.Lines.Append('Jarak : '+IntToStr(d));
        Form1.Memo1.Lines.Append('Jalur '+toStr);
        Sleep(100);
      end;
    end;

    // Normalisasikan Fitness
    sum := 0;
    for j := 0 to sumPop-1 do
      sum := sum + fit[j];
    for j := 0 to sumPop-1 do
      fit[j] := fit[j]/sum;

    // Membuat Generasi Selanjutnya
    for j := 0 to sumPop-1 do
    begin
      indA := pilihAcak(fit);
      indB := pilihAcak(fit);
      crossOver(pop[indA], pop[indB], path);
      mutasi(path);
      path[n] := path[0];
      newPop[j] := Copy(path, 0, n+1);
    end;
    pop := Copy(newPop, 0, sumPop);
    Sleep(100);
  end;
  workerThread.Terminate;
end;

procedure Thread1.redrawBP;
begin
  Form1.DrawBestSolution(bestPath, clBlack);
end;

end.
